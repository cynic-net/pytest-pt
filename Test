#!/usr/bin/env bash
set -Eeuo pipefail

pythonz=~/.pythonz/bin/pythonz
pythonz_url='https://raw.github.com/saghul/pythonz/master/pythonz-install'

####################################################################
#   Functions

die() {
    local exitcode="$1"; shift
    echo 1>&2 "ERROR:" "$@"
    exit $exitcode
}

tox_python_versions() {
    #   Extract a list of all Python versions (major.minor number only)
    #   that tox.ini is testing. `tox -a` will return a list of all
    #   combinations like `py3.11-pytest8`; for all lines starting
    #   with `pyM.n` we extract just the `M.n` and print the unique
    #   values in sorted order.
    tox -a | sed -n -e '/^py.*-pytest/{ s/^py//; s/-.*//; p }' \
        | sort -t . -k 2 -n | uniq
}

pythonz_versions() {
    #   For each version number M.n in $(tox_python_versions), find
    #   the latest version that pythonz knows about (whether installed
    #   or not), which will be in M.n.p format. (This is somewhat slow.)
    for v in $(tox_python_versions); do
        lastver=$(
            pythonz list -t cpython -a \
                | sed -n -e '/^  *[0-9]/s/^ *//p' \
                | grep -F "$v." \
                | sort -t . -k 3 -n \
                | tail -1
            ) || true
        [[ -z $lastver ]] && die 4 "Can't find Python version matching $v"
        echo -n "$lastver" ' '
    done
}

build_pythons() {
    #   Install pythonz and Python build dependencies, if necessary, or
    #   update pythonz to the latest version if that's not been done within
    #   the last 24 hours.
    #
    #   Then have pythonz download and build all Python versions in
    #   $(pythonz_versions). Any already built will simply produce a
    #   notice from pythonz that it's already there.
    #
    if [[ -x "$pythonz" ]]; then
        #   If pythonz is already installed, we assume that all the OS
        #   dependencies necessary to build working Pythons are intalled.
        tsfile="$PROJDIR/.build/pythonz-update-timestamp"
        touch -d '24 hours ago' "$tsfile"
        [[ $pythonz -ot $tsfile ]] && {     # pythonz more than a day old?
            echo "===== Updating pythonz"
            "$pythonz" update
        }
    else
        echo "===== Installing Python build dependencies"
        #   Also apt-get build dependencies as per "From Source" below:
        if type -p apt-get >/dev/null; then
            sudo apt-get install build-essential dpkg-dev \
                libffi-dev zlib1g-dev libbz2-dev liblzma-dev \
                libssl-dev libgdbm-dev libncurses5-dev libreadline-dev
        else
            die 3 "Don't know how to install Python build dependencies"
        fi
        echo "===== Installing pythonz"
        curl -sS -kL "$pythonz_url" | bash
    fi

    echo "===== Building Pythons"
    for v in $(pythonz_versions); do
        echo "----- Building Python $v"
        "$pythonz" install -t cpython "$v"
    done

    echo "===== Python builds completed"
}

test_tox() {
    for v in $(pythonz_versions); do
        #   Horrible hack to get tox to be able to use our pythonz Pythons.
        PATH="$(dirname "$("$pythonz" locate $v)")":"$PATH"
    done
    tox "$@"
}

####################################################################
#   Main

PROJDIR=$(cd "$(dirname "$0")" && pwd -P)
cd "$PROJDIR"

#   If first arg is -B we build pythonz interpreters.
build_pythons_opt=false
skip_typecheck=false
while [[ ${#@} -gt 0 ]]; do case "$1" in
    -B)     shift; build_pythons_opt=true;;
    -T)     shift; skip_typecheck=true;;
     *)     break;;
esac; done
#   Remaining args passed on to tox

[[ -x "$pythonz" ]] \
    || die 3 "$pythonz not found; use ./Test -B to build Pythons"
. ./pactivate -q
$skip_typecheck || { echo -n 'mypy: '; PYTHONPATH=src/ mypy; }
exit 99 # XXX
$build_pythons_opt && build_pythons
test_tox "$@"
